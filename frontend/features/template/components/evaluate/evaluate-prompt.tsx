"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useState } from "react";
import { Check, Copy, FileQuestion, Play } from "lucide-react";
import { useTemplate } from "@/context/template-context";
import { Label } from "@/components/ui/label";
import { CreatableCombobox } from "@/components/prompt/generator-items/creatable-combobox";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { ArrayConfig } from "@/components/prompt/generator-items/array-config";
import { toast } from "sonner";

interface EvaluationResult {
  id: string;
  // configValues: Record<string, string>;
  prompt: string;
  result: string;
  timestamp: string;
  selected?: boolean;
}

export function EvaluatePrompt() {
  const { template } = useTemplate();

  const [isEvaluating, setIsEvaluating] = useState(false);

  const [selectedValues, setSelectedValues] = useState<Record<string, string>>(
    {},
  );
  const [textareaValues, setTextareaValues] = useState<Record<string, string>>(
    {},
  );

  const [arrayValues, setArrayValues] = useState<
    Record<string, { id: string; values: string[] }[]>
  >({});

  const handleSelectChange = (configLabel: string, value: string) => {
    setSelectedValues((prevState) => ({
      ...prevState,
      [configLabel]: value,
    }));
  };

  const [evaluationResults, setEvaluationResults] = useState<
    EvaluationResult[]
  >([]);

  const handleCreateOption = (configLabel: string, inputValue: string) => {
    const newOption = {
      value: inputValue,
    };

    setSelectedValues((prevState) => ({
      ...prevState,
      [configLabel]: newOption.value,
    }));
  };

  const handleTextareaChange = (configLabel: string, value: string) => {
    setTextareaValues((prevState) => ({
      ...prevState,
      [configLabel]: value,
    }));
  };

  const handleRunEvaluation = () => {
    setIsEvaluating(true);

    const stringTemplate = template.stringTemplate;
    let prompt = stringTemplate;

    template.configs.forEach((config) => {
      prompt = prompt.replace("$", "");
      if (config.type === "dropdown" || config.type === "combobox") {
        if (
          selectedValues[config.label] &&
          selectedValues[config.label] !== "None"
        ) {
          prompt = prompt.replace(
            `{${config.label}}`,
            selectedValues[config.label],
          );
        } else {
          prompt = prompt.replace(`{${config.label}}`, "");
        }
      } else if (config.type === "textarea") {
        if (textareaValues[config.label]) {
          prompt = prompt.replace(
            `{${config.label}}`,
            textareaValues[config.label],
          );
        } else {
          prompt = prompt.replace(`{${config.label}}`, "");
        }
      } else if (config.type === "array") {
        const replaceValue = arrayValues[config.label]
          ? arrayValues[config.label]
              .map((item, index) =>
                item.values
                  .map(
                    (value, labelIndex) =>
                      `\n\t${config.values[labelIndex].value} ${
                        index + 1
                      }: ${value}`,
                  )
                  .join(""),
              )
              .join("\n")
          : "";

        prompt = prompt.replace(`{${config.label}}`, `${replaceValue}`);
      }
    });

    // Remove only excessive spaces, not newlines "\n"
    prompt = prompt.replace(/ {2,}/g, " ");
    prompt = prompt.replace(/\\n/g, "\n");

    const newResult: EvaluationResult = {
      id: Date.now().toString(),
      // configValues,
      prompt: prompt,
      result: `Here's a response based on your prompt:\n\n"${prompt}"\n\nThis is a simulated AI response that would be generated by running the prompt with the provided configuration values.`,
      timestamp: new Date().toISOString(),
    };

    setEvaluationResults([...evaluationResults, newResult]);
    setIsEvaluating(false);

    // // Create a config values object
    // const configValues: Record<string, string> = {};
    // template.configs.forEach((config) => {
    //   configValues[config.label] = config.value;
    // });
    //
    // // In a real app, you would call an API to run the prompt with these configs
    // // For now, we'll simulate a response after a delay
    // setTimeout(() => {
    //   // Generate a mock result
    //   let processedTemplate = template.stringTemplate;
    //   Object.entries(configValues).forEach(([key, value]) => {
    //     processedTemplate = processedTemplate.replace(`\${${key}}`, value);
    //   });
    //
    //   const newResult: EvaluationResult = {
    //     id: Date.now().toString(),
    //     configValues,
    //     prompt: processedTemplate,
    //     result: `Here's a response based on your prompt: "${processedTemplate}"\n\nThis is a simulated AI response that would be generated by running the prompt with the provided configuration values.`,
    //     timestamp: new Date().toISOString(),
    //   };
    //
    //   setEvaluationResults([...evaluationResults, newResult]);
    //   setIsEvaluating(false);
    // }, 1500);
  };

  const handleSelectResult = (resultId: string) => {
    const updatedResults = evaluationResults.map((result) => ({
      ...result,
      selected: result.id === resultId,
    }));
    setEvaluationResults(updatedResults);
  };

  const handleCopyResult = (result: string) => {
    navigator.clipboard.writeText(result);
    toast.success("Result copied to clipboard");
  };

  return (
    <>
      <div className="grid gap-6 md:grid-cols-2">
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-sm font-medium">
                Configuration Values
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {template.configs?.map((config) => (
                <div key={config.label}>
                  <div className="flex justify-between">
                    <Label htmlFor={config.label.toLowerCase()}>
                      {config.label}
                    </Label>
                    <Button variant="ghost" className="h-8 w-8 mr-2">
                      <FileQuestion></FileQuestion>
                    </Button>
                  </div>

                  <div className="px-2">
                    {config.type === "combobox" ? (
                      <CreatableCombobox
                        options={config.values}
                        value={selectedValues[config.label]}
                        onChange={(value) =>
                          handleSelectChange(config.label, value)
                        }
                        placeholder={`Select a ${config.label.toLowerCase()}`}
                        onCreateOption={(inputValue) =>
                          handleCreateOption(config.label, inputValue)
                        }
                      />
                    ) : config.type === "dropdown" ? (
                      <Select
                        onValueChange={(value) =>
                          handleSelectChange(config.label, value)
                        }
                      >
                        <SelectTrigger id={config.label}>
                          <SelectValue
                            placeholder={
                              selectedValues[config.label] ??
                              `Select a ${config.label.toLowerCase()}`
                            }
                          />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="None">None</SelectItem>
                          {config.values.map((value) => (
                            <SelectItem key={value.id} value={value.value}>
                              {value.value}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : config.type === "textarea" ? (
                      <Textarea
                        id={config.label}
                        placeholder={`Input your content`}
                        value={textareaValues[config.label]}
                        onChange={(e) =>
                          handleTextareaChange(config.label, e.target.value)
                        }
                        // className={config.className}
                      />
                    ) : config.type === "array" ? (
                      <>
                        <ArrayConfig
                          id={config.label}
                          labels={config.values.map((value) => {
                            return value.value;
                          })}
                          values={arrayValues[config.label]}
                          setArrayValues={setArrayValues}
                        ></ArrayConfig>
                      </>
                    ) : null}
                  </div>
                </div>
              ))}
            </CardContent>
            <CardFooter>
              <Button
                className="w-full"
                onClick={handleRunEvaluation}
                disabled={isEvaluating}
              >
                {isEvaluating ? (
                  <>Running...</>
                ) : (
                  <>
                    <Play className="h-4 w-4 mr-2" />
                    Run Evaluation
                  </>
                )}
              </Button>
            </CardFooter>
          </Card>
        </div>

        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-sm font-medium">
                Evaluation Results
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 max-h-[500px] overflow-y-auto">
              {evaluationResults.length === 0 ? (
                <p className="text-center text-muted-foreground py-8">
                  No evaluations yet. Run the prompt with different
                  configurations to see results.
                </p>
              ) : (
                evaluationResults.map((result) => (
                  <Card
                    key={result.id}
                    className={`border ${result.selected ? "border-primary" : ""}`}
                  >
                    <CardHeader className="pb-2">
                      <div className="flex items-center justify-between">
                        <div className="text-xs text-muted-foreground">
                          {new Date(result.timestamp).toLocaleString()}
                        </div>
                        <div className="flex items-center gap-2">
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-6 w-6"
                            onClick={() => handleCopyResult(result.result)}
                          >
                            <Copy className="h-3 w-3" />
                          </Button>
                          <Button
                            variant={result.selected ? "default" : "ghost"}
                            size="icon"
                            className="h-6 w-6"
                            onClick={() => handleSelectResult(result.id)}
                          >
                            <Check className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="text-xs space-y-2 mb-2">
                        <p className="font-medium">Configuration:</p>
                        <div className="grid grid-cols-2 gap-1">
                          {/* {Object.entries(result.configValues).map( */}
                          {/*   ([key, value]) => ( */}
                          {/*     <div key={key} className="flex"> */}
                          {/*       <span className="font-medium mr-1">{key}:</span> */}
                          {/*       <span className="truncate">{value}</span> */}
                          {/*     </div> */}
                          {/*   ), */}
                          {/* )} */}
                        </div>
                      </div>
                      <div className="border-t pt-2">
                        <p className="text-sm whitespace-pre-wrap">
                          {result.result}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                ))
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </>
  );
}
