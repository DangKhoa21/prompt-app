"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { useState } from "react";
import { Check, Copy, Play } from "lucide-react";
import { useTemplate } from "@/context/template-context";

interface Config {
  id: string;
  label: string;
  type: string;
  value: string;
}

interface EvaluationResult {
  id: string;
  configValues: Record<string, string>;
  result: string;
  timestamp: string;
  selected?: boolean;
}

export function EvaluatePrompt() {
  const { template } = useTemplate();
  // Evaluation states
  const [evaluationConfigs, setEvaluationConfigs] = useState<Config[]>([]);
  const [isEvaluating, setIsEvaluating] = useState(false);
  const [evaluationResults, setEvaluationResults] = useState<
    EvaluationResult[]
  >([]);

  const handleEvaluationConfigChange = (configId: string, value: string) => {
    const updatedConfigs = evaluationConfigs.map((config) =>
      config.id === configId ? { ...config, value } : config,
    );
    setEvaluationConfigs(updatedConfigs);
  };

  const handleRunEvaluation = () => {
    setIsEvaluating(true);

    // Create a config values object
    const configValues: Record<string, string> = {};
    evaluationConfigs.forEach((config) => {
      configValues[config.label] = config.value;
    });

    // In a real app, you would call an API to run the prompt with these configs
    // For now, we'll simulate a response after a delay
    setTimeout(() => {
      // Generate a mock result
      let processedTemplate = template.stringTemplate;
      Object.entries(configValues).forEach(([key, value]) => {
        processedTemplate = processedTemplate.replace(`\${${key}}`, value);
      });

      const newResult: EvaluationResult = {
        id: Date.now().toString(),
        configValues,
        result: `Here's a response based on your prompt: "${processedTemplate}"\n\nThis is a simulated AI response that would be generated by running the prompt with the provided configuration values.`,
        timestamp: new Date().toISOString(),
      };

      setEvaluationResults([...evaluationResults, newResult]);
      setIsEvaluating(false);
    }, 1500);
  };

  const handleSelectResult = (resultId: string) => {
    const updatedResults = evaluationResults.map((result) => ({
      ...result,
      selected: result.id === resultId,
    }));
    setEvaluationResults(updatedResults);
  };

  const handleCopyResult = (result: string) => {
    navigator.clipboard.writeText(result);
    alert("Result copied to clipboard");
  };

  return (
    <>
      <div className="grid gap-6 md:grid-cols-2">
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-sm font-medium">
                Configuration Values
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {evaluationConfigs.map((config) => (
                <div key={config.id} className="space-y-2">
                  <label className="text-sm font-medium">{config.label}</label>
                  <Input
                    value={config.value}
                    onChange={(e) =>
                      handleEvaluationConfigChange(config.id, e.target.value)
                    }
                    placeholder={`Enter value for ${config.label}...`}
                  />
                </div>
              ))}
            </CardContent>
            <CardFooter>
              <Button
                className="w-full"
                onClick={handleRunEvaluation}
                disabled={isEvaluating}
              >
                {isEvaluating ? (
                  <>Running...</>
                ) : (
                  <>
                    <Play className="h-4 w-4 mr-2" />
                    Run Evaluation
                  </>
                )}
              </Button>
            </CardFooter>
          </Card>
        </div>

        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-sm font-medium">
                Evaluation Results
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 max-h-[500px] overflow-y-auto">
              {evaluationResults.length === 0 ? (
                <p className="text-center text-muted-foreground py-8">
                  No evaluations yet. Run the prompt with different
                  configurations to see results.
                </p>
              ) : (
                evaluationResults.map((result) => (
                  <Card
                    key={result.id}
                    className={`border ${result.selected ? "border-primary" : ""}`}
                  >
                    <CardHeader className="pb-2">
                      <div className="flex items-center justify-between">
                        <div className="text-xs text-muted-foreground">
                          {new Date(result.timestamp).toLocaleString()}
                        </div>
                        <div className="flex items-center gap-2">
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-6 w-6"
                            onClick={() => handleCopyResult(result.result)}
                          >
                            <Copy className="h-3 w-3" />
                          </Button>
                          <Button
                            variant={result.selected ? "default" : "ghost"}
                            size="icon"
                            className="h-6 w-6"
                            onClick={() => handleSelectResult(result.id)}
                          >
                            <Check className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="text-xs space-y-2 mb-2">
                        <p className="font-medium">Configuration:</p>
                        <div className="grid grid-cols-2 gap-1">
                          {Object.entries(result.configValues).map(
                            ([key, value]) => (
                              <div key={key} className="flex">
                                <span className="font-medium mr-1">{key}:</span>
                                <span className="truncate">{value}</span>
                              </div>
                            ),
                          )}
                        </div>
                      </div>
                      <div className="border-t pt-2">
                        <p className="text-sm whitespace-pre-wrap">
                          {result.result}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                ))
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </>
  );
}
