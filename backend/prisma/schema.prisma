// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// db model
model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chats   Chat[]
  prompts Prompt[]
  stars   Star[]
  roles   UserRole[]
}

model Role {
  id        Int      @id @default(autoincrement())
  role      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserRole[]
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Chat {
  id        Int      @id @default(autoincrement())
  title     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  role      String
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prompt {
  id             Int      @id @default(autoincrement())
  title          String   @unique
  description    String
  stringTemplate String
  creator        User     @relation(fields: [creatorId], references: [id])
  creatorId      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tags    PromptTag[]
  configs PromptConfig[]
  stars   Star[]
}

model PromptTag {
  prompt   Prompt @relation(fields: [promptId], references: [id])
  promptId Int
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    Int

  @@id([promptId, tagId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prompts PromptTag[]
}

model PromptConfig {
  id        Int      @id @default(autoincrement())
  label     String   @unique
  prompt    Prompt   @relation(fields: [promptId], references: [id])
  promptId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  values ConfigValue[]
}

model ConfigValue {
  id             Int          @id @default(autoincrement())
  value          String       @unique
  promptConfig   PromptConfig @relation(fields: [promptConfigId], references: [id])
  promptConfigId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Star {
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  prompt   Prompt @relation(fields: [promptId], references: [id])
  promptId Int

  @@id([userId, promptId])
}
